plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.kapt'
}

android {
    namespace 'com.seafile.seadroid2'

    def releaseKeyPropsFile = project.file("key.properties")
    def hasReleaseKeystore = releaseKeyPropsFile.exists()

    defaultConfig {

        applicationId namespace
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        compileSdk rootProject.ext.compileSdkVersion

        versionCode 205
        versionName "3.0.18"
        multiDexEnabled true

        resValue "string", "authorities", defaultConfig.applicationId + '.debug.cameraupload.provider'
        resValue "string", "account_type", defaultConfig.applicationId + ".debug.account.api2"

        buildConfigField "String", "ACCOUNT_TYPE", '"' + defaultConfig.applicationId + '.debug.account.api2"'
        buildConfigField "String", "FILE_PROVIDER_AUTHORITIES", '"' + defaultConfig.applicationId + '.debug.fileprovider"'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments["room.incremental"] = "true"
//                arguments["workmanager.inline"] = "false"
            }
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    signingConfigs {
        debug {
//            def props = new Properties()
//            props.load(new FileInputStream(project.file("debugkey.properties")))
//            storeFile project.file(props.keyStore)
//            storePassword props.keyStorePassword
//            keyAlias props.keyAlias
//            keyPassword props.keyAliasPassword
        }
        release {
            if (hasReleaseKeystore) {
                def props = new Properties()
                releaseKeyPropsFile.withInputStream { props.load(it) }
                storeFile project.file(props.getProperty("keyStore"))
                storePassword props.getProperty("keyStorePassword")
                keyAlias props.getProperty("keyAlias")
                keyPassword props.getProperty("keyAliasPassword")
            } else {
                logger.warn("Release signing skipped: app/key.properties not found.")
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug
            minifyEnabled false

            resValue "string", "authorities", defaultConfig.applicationId + '.debug.cameraupload.provider'
            resValue "string", "account_type", defaultConfig.applicationId + ".debug.account.api2"

            buildConfigField "String", "ACCOUNT_TYPE", '"' + defaultConfig.applicationId + '.debug.account.api2"'
            buildConfigField "String", "FILE_PROVIDER_AUTHORITIES", '"' + defaultConfig.applicationId + '.debug.fileprovider"'

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                        if (variant.name == "debug") {
                            outputFileName = "seafile-debug-" + defaultConfig.versionName + ".apk"
                        }
                    }
                }
            }
        }

        release {
            signingConfig hasReleaseKeystore ? signingConfigs.release : signingConfigs.debug
            minifyEnabled true

            resValue "string", "authorities", defaultConfig.applicationId + '.cameraupload.provider'
            resValue "string", "account_type", defaultConfig.applicationId + ".account.api2"

            buildConfigField "String", "ACCOUNT_TYPE", '"' + defaultConfig.applicationId + '.account.api2"'
            buildConfigField "String", "FILE_PROVIDER_AUTHORITIES", '"' + defaultConfig.applicationId + '.fileprovider"'


            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    if (variant.name == "release") {
                        if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                            def versionName = defaultConfig.versionName

                            def outputFileName = "${versionName}_patch_build_temp.apk"
                            outputFileName = outputFileName.replace(" ", "_")
                            output.outputFileName = outputFileName

                            variant.assemble.doLast {

                                def buildCountFile = file("$rootDir/build_count.txt")
                                def buildCount = 0
                                if (buildCountFile.exists()) {
                                    buildCount = buildCountFile.text.toInteger()
                                }

                                buildCount++
                                buildCountFile.text = buildCount.toString()

                                if (versionName.contains("-")) {
                                    def prefix = versionName.substring(0, versionName.indexOf("-"))
                                    def suffix = versionName.substring(versionName.indexOf("-") + 1)
                                    versionName = prefix + "(" + suffix + ")"
                                }

                                def newOutputFileName = "seafile_${versionName}_patch${buildCount}.apk"
                                newOutputFileName = newOutputFileName.replace(" ", "_").replace("-", "_")
                                def apkFile = output.outputFile
                                def newApkFile = new File(apkFile.parent, newOutputFileName)

                                if (apkFile.exists()) {
                                    apkFile.renameTo(newApkFile)
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bundle {
        density {
            enableSplit true
        }
        abi {
            enableSplit true
        }
        language {
            enableSplit true
        }
    }

    buildFeatures {
        viewBinding true
    }

    allprojects {
        repositories {
            maven { url 'https://jitpack.io' }
        }
    }

//    configurations {
//        implementation.exclude group: 'org.jetbrains' , module:'annotations'
//    }

    dependencies {
        implementation fileTree(include: ['*.jar'], dir: 'libs')

//        debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.14'

        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        // Firebase
        implementation platform('com.google.firebase:firebase-bom:33.2.0')
        implementation 'com.google.firebase:firebase-crashlytics'

        //media3
        final def media3_version = '1.4.1'
        implementation "androidx.media3:media3-exoplayer:$media3_version"
        implementation "androidx.media3:media3-ui:$media3_version"

        implementation 'androidx.core:core-ktx:1.16.0'
        implementation 'androidx.core:core-splashscreen:1.0.1'
        implementation "androidx.appcompat:appcompat:1.7.1"
        implementation "androidx.activity:activity:1.10.1"
        implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
        implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
        implementation "androidx.preference:preference:1.2.1"
//        implementation "androidx.datastore:datastore-preferences:1.0.0"
//        implementation "androidx.datastore:datastore-preferences-rxjava2:1.0.0"
        implementation "androidx.core:core-splashscreen:1.0.1"
        implementation "androidx.webkit:webkit:1.12.1"
        implementation 'com.google.android.flexbox:flexbox:3.0.0'

//        implementation "androidx.paging:paging-runtime:3.3.5"
//        implementation "androidx.paging:paging-rxjava3:3.3.5"

        //https://github.com/material-components/material-components-android
        implementation "com.google.android.material:material:1.12.0"

        def lifecycle_version = "2.8.4"
        implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
        implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
        //ProcessLifecycleOwner provides a lifecycle for the whole application process
        implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
        //helpers for implementing LifecycleOwner in a Service
        //implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
        // optional - ReactiveStreams support for LiveData
        //implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"

        implementation "androidx.work:work-runtime:2.9.1"
//        implementation "androidx.work:work-rxjava2:$work_version"

        //squareup
        def retrofit_version = "2.9.0"
        implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
        implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
        implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
        implementation 'com.squareup.okhttp3:okhttp:3.9.1'
        implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'

        //room
        def room_version = "2.6.1"
        implementation "androidx.room:room-runtime:$room_version"
        implementation "androidx.room:room-rxjava2:$room_version"
        kapt "androidx.room:room-compiler:$room_version"

        //https://github.com/KunMinX/UnPeek-LiveData
        implementation 'com.kunminx.arch:unpeek-livedata:7.8.0'

        implementation 'org.commonmark:commonmark:0.21.0'
//        implementation 'org.commonmark:commonmark-ext-gfm-tables:0.21.0'  // 如果需要表格支持
        implementation 'org.commonmark:commonmark-ext-autolink:0.21.0'   // 如果需要自动链接支持

        //https://github.com/lzyzsd/JsBridge
        implementation 'com.github.lzyzsd:jsbridge:1.0.4'

//        https://github.com/rubensousa/GravitySnapHelper
//        implementation 'com.github.rubensousa:gravitysnaphelper:2.2.2'


        //
        implementation 'com.blankj:utilcode:1.30.7'

        //https://github.com/CymChad/BaseRecyclerViewAdapterHelper
        implementation "io.github.cymchad:BaseRecyclerViewAdapterHelper4:4.1.2"

        //https://github.com/panpf/stickyitemdecoration
        implementation "io.github.panpf.stickyitemdecoration:stickyitemdecoration:1.0.2"

        //Thanks: https://github.com/RikkaApps
        //implementation 'dev.rikka.rikkax.preference:simplemenu-preference:1.0.3'

        //https://github.com/michaellee123/LiveEventBus
        implementation 'com.github.michaellee123:LiveEventBus:1.8.14'

        //https://github.com/google/guava
        implementation "com.google.guava:guava:33.0.0-android"
        //gson
        implementation 'com.google.code.gson:gson:2.10.1'
        //https://github.com/apache/commons-io
        implementation 'commons-io:commons-io:2.16.1'
        //https://github.com/apache/commons-lang
        implementation 'com.github.apache:commons-lang:rel~commons-lang-3.12.0'
        //https://github.com/apache/commons-imaging
        implementation 'com.github.apache:commons-imaging:sanselan-0.97-incubator'
        //https://github.com/drewnoakes/metadata-extractor
        implementation 'com.drewnoakes:metadata-extractor:2.19.0'


        //Rxjava
        implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
        implementation 'io.reactivex.rxjava2:rxjava:2.2.10'

        //https://github.com/elvishew/xLog
        implementation 'com.elvishew:xlog:1.10.1'

//        //https://github.com/wasabeef/recyclerview-animators
//        implementation 'jp.wasabeef:recyclerview-animators:4.0.2'

        //live event bus
//        implementation 'io.github.jeremyliao:live-event-bus-x:1.8.0'

//        implementation 'com.github.kevinsawicki:http-request:6.0'
//        implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.3'


        //thanks: https://github.com/Baseflow/PhotoView
//        implementation 'com.github.Chrisbanes:PhotoView:2.3.0'

        //https://jitpack.io
        implementation 'com.github.haiwen:MarkdownView:v0.19.4'
        implementation 'com.github.yydcdut.RxMarkdown:markdown-processor:v0.1.3'


        //https://noties.io/Markwon/
//        final def markwon_version = '4.6.2'
//        implementation "io.noties.markwon:core:$markwon_version"
//        implementation "io.noties.markwon:editor:$markwon_version"
//        implementation "io.noties.markwon:ext-strikethrough:$markwon_version"
//        implementation "io.noties.markwon:ext-tables:$markwon_version"
//        implementation "io.noties.markwon:ext-tasklist:$markwon_version"
//        implementation "io.noties.markwon:ext-latex:$markwon_version"
//        implementation "io.noties.markwon:html:$markwon_version"
//        implementation "io.noties.markwon:image:$markwon_version"
//        implementation "io.noties.markwon:image-glide:$markwon_version"
//        implementation "io.noties.markwon:linkify:$markwon_version"
//        implementation "io.noties.markwon:inline-parser:$markwon_version"
//        implementation "io.noties.markwon:recycler:$markwon_version"


        implementation 'com.madgag.spongycastle:core:1.54.0.0'
        implementation 'com.madgag.spongycastle:prov:1.54.0.0'

        def glide_version = "4.16.0"
        implementation "com.github.bumptech.glide:glide:$glide_version"
        implementation "com.github.bumptech.glide:okhttp3-integration:$glide_version"
        kapt "com.github.bumptech.glide:compiler:$glide_version"


        testImplementation 'junit:junit:4.13.2'
        androidTestImplementation 'androidx.test.ext:junit:1.2.1'
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
        testImplementation 'org.robolectric:robolectric:4.9'


    }
    lint {
        abortOnError false
        disable 'MissingTranslation'
    }

}
